{"version":3,"sources":["logo.svg","Contexts/appContext.js","Components/ColorPalette.js","Components/ImageList.js","Components/ImageSearch.js","View/ColorPicker.js","App.js","reportWebVitals.js","index.js"],"names":["initState","searchResult","selectedImage","colorPalette","setSearchResults","setSelectedImage","setColorPalette","AppContext","React","createContext","AppContextProvider","props","useState","console","log","state","setState","prevState","match","Number","parseInt","useEffect","Provider","value","children","ColorPalette","useContext","rgbToHex","r","g","b","componentToHex","c","hex","toString","length","Container","Typography","variant","style","margin","Masonry","columns","spacing","map","color","index","Paper","onClick","navigator","clipboard","writeText","copyToClipboard","height","width","borderRadius","backgroundColor","padding","display","alignItems","justifyContent","cursor","toUpperCase","ImageListContainer","onImageClick","event","target","ColorThief","getPalette","dataset","className","cols","gap","img","elevation","overflow","alt","description","src","url","styles","justifySelf","objectFit","crossOrigin","loading","ImageSearch","searchString","setSearchString","TextField","type","onChange","placeholder","Button","GoogleImages","search","then","images","catch","error","ColorPicker","Grid","container","item","xs","ImageList","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0027a41.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\";\r\n\r\nlet initState = {\r\n  searchResult: [],\r\n  selectedImage: 0,\r\n  colorPalette: [],\r\n  setSearchResults: () => {},\r\n  setSelectedImage: () => {},\r\n  setColorPalette: () => {},\r\n};\r\n\r\nexport const AppContext = React.createContext(initState);\r\n\r\nexport const AppContextProvider = (props) => {\r\n  let setSearchResults = (searchResult) => {\r\n    console.log(\"in setSearchResults\", state);\r\n    setState((prevState) => ({ ...prevState, searchResult: searchResult }));\r\n  };\r\n\r\n  let setColorPalette = (colorPalette) => {\r\n    setState((prevState) => ({ ...prevState, colorPalette: colorPalette }));\r\n  };\r\n\r\n  let setSelectedImage = (selectedImage) => {\r\n    if (selectedImage && selectedImage.match(/[0-9]+/)) {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        selectedImage: Number.parseInt(selectedImage),\r\n      }));\r\n    }\r\n  };\r\n\r\n  const [state, setState] = useState({\r\n    ...initState,\r\n    setSearchResults: setSearchResults,\r\n    setSelectedImage: setSelectedImage,\r\n    setColorPalette: setColorPalette,\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"state\", state);\r\n  }, [state]);\r\n\r\n  return (\r\n    <AppContext.Provider value={state}>{props.children}</AppContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Card, Container, ImageList, Paper, Typography } from \"@mui/material\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport { AppContext } from \"../Contexts/appContext\";\r\n\r\nconst ColorPalette = (props) => {\r\n  let { colorPalette } = useContext(AppContext);\r\n\r\n  /**\r\n   *\r\n   * Reference https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\n   *  */\r\n\r\n  let rgbToHex = ([r, g, b]) => {\r\n    let componentToHex = (c) => {\r\n      var hex = c.toString(16);\r\n      return hex.length == 1 ? \"0\" + hex : hex;\r\n    };\r\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n  };\r\n\r\n  let copyToClipboard = (color) => {\r\n    navigator.clipboard.writeText(color);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant={\"h5\"} style={{ margin: \"8px\" }}>\r\n        Click color to copy HEX to clipboard\r\n      </Typography>\r\n      <Masonry columns={4} spacing={1}>\r\n        {colorPalette.map((color, index) => {\r\n          let hex = rgbToHex(color);\r\n          return (\r\n            <Paper\r\n              key={index}\r\n              onClick={() => {\r\n                copyToClipboard(rgbToHex(color));\r\n              }}\r\n              style={{\r\n                height: \"100px\",\r\n                width: \"100px\",\r\n                borderRadius: \"100px\",\r\n                backgroundColor: hex,\r\n                margin: \"2px\",\r\n                padding: \"4px\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <Typography\r\n                color={hex.toUpperCase() > \"#777777\" ? \"black\" : \"white\"}\r\n              >\r\n                {hex}\r\n              </Typography>\r\n            </Paper>\r\n          );\r\n        })}\r\n      </Masonry>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ColorPalette;\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../Contexts/appContext\";\r\nimport ColorThief from \"colorthief\";\r\nimport { Container, Paper, Typography } from \"@mui/material\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\n\r\nconst ImageListContainer = (props) => {\r\n  let { searchResult, selectedImage, setSelectedImage, setColorPalette } =\r\n    useContext(AppContext);\r\n\r\n  const onImageClick = (event) => {\r\n    setColorPalette(\r\n      event?.target ? new ColorThief().getPalette(event.target) : []\r\n    );\r\n    setSelectedImage(event?.target?.dataset?.index);\r\n  };\r\n\r\n  return (\r\n    <Container className={\"search-results\"}>\r\n      <Typography variant={\"h5\"} style={{ margin: \"8px\" }}>\r\n        Click Image to generate palette\r\n      </Typography>\r\n      <Masonry cols={3} gap={8}>\r\n        {searchResult?.map((img, index) => (\r\n          <Paper\r\n            key={index}\r\n            elevation={index == selectedImage ? 10 : 1}\r\n            style={{ cursor: \"pointer\", margin: \"4px\", overflow: \"hidden\" }}\r\n          >\r\n            <img\r\n              alt={img?.description}\r\n              className={\"result-image\"}\r\n              src={img?.url}\r\n              styles={{\r\n                display: \"flex !important\",\r\n                justifySelf: \"center !important\",\r\n                objectFit: \"cover\",\r\n              }}\r\n              height=\"100px\"\r\n              crossOrigin=\"Anonymous\"\r\n              onClick={onImageClick}\r\n              data-index={index}\r\n              loading=\"lazy\"\r\n            />\r\n          </Paper>\r\n        ))}\r\n      </Masonry>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ImageListContainer;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Button, Container, TextField } from \"@mui/material\";\r\nimport GoogleImages from \"google-images\";\r\n\r\nimport { AppContext } from \"../Contexts/appContext\";\r\n\r\nconst ImageSearch = (props) => {\r\n  const [searchString, setSearchString] = useState(\"\");\r\n\r\n  const { setSearchResults } = useContext(AppContext);\r\n\r\n  let onInputChange = (event) => {\r\n    setSearchString(event.target.value);\r\n  };\r\n\r\n  let onSearchClick = () => {\r\n    if (searchString.length > 0) {\r\n      const client = new GoogleImages(\r\n        \"a19eb9981d4a54cbb\",\r\n        \"AIzaSyC60Z1TBXDHgUGetxlmzeUqNIy3OPkRxak\"\r\n      );\r\n\r\n      client\r\n        .search(searchString, { type: \"photo\" })\r\n        .then((images) => {\r\n          setSearchResults(images);\r\n        })\r\n        .catch((error) => {\r\n          setSearchResults([]);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className={\"search-container\"}>\r\n      <div className={\"search-bar\"}>\r\n        <TextField\r\n          variant=\"standard\"\r\n          type=\"text\"\r\n          onChange={onInputChange}\r\n          placeholder={\"Search item...\"}\r\n          value={searchString}\r\n        />\r\n        <Button className={\"search-button\"} onClick={onSearchClick}>\r\n          Go!\r\n        </Button>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ImageSearch;\r\n","import { Grid } from \"@mui/material\";\r\nimport { Container, Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport ColorPalette from \"../Components/ColorPalette\";\r\nimport ImageList from \"../Components/ImageList\";\r\nimport ImageSearch from \"../Components/ImageSearch\";\r\n\r\nimport { AppContextProvider } from \"../Contexts/appContext\";\r\n\r\nclass ColorPicker extends React.Component {\r\n  render() {\r\n    return (\r\n      <AppContextProvider>\r\n        <Container>\r\n          <Typography variant=\"h2\">Color Extractor</Typography>\r\n          <ImageSearch />\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={7}>\r\n              <ImageList />\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n              <ColorPalette />\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </AppContextProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColorPicker;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport ColorPicker from './View/ColorPicker';\n\nfunction App() {\n  return (\n    <ColorPicker />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}